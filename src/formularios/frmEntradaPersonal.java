package formularios;

import BD.ConexionBD;
import com.digitalpersona.onetouch.DPFPDataPurpose;
import com.digitalpersona.onetouch.DPFPFeatureSet;
import com.digitalpersona.onetouch.DPFPGlobal;
import com.digitalpersona.onetouch.DPFPSample;
import com.digitalpersona.onetouch.DPFPTemplate;
import com.digitalpersona.onetouch.capture.DPFPCapture;
import com.digitalpersona.onetouch.capture.event.DPFPDataAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPDataEvent;
import com.digitalpersona.onetouch.capture.event.DPFPErrorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPErrorEvent;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPReaderStatusEvent;
import com.digitalpersona.onetouch.capture.event.DPFPSensorAdapter;
import com.digitalpersona.onetouch.capture.event.DPFPSensorEvent;
import com.digitalpersona.onetouch.processing.DPFPEnrollment;
import com.digitalpersona.onetouch.processing.DPFPFeatureExtraction;
import com.digitalpersona.onetouch.processing.DPFPImageQualityException;
import com.digitalpersona.onetouch.verification.DPFPVerification;
import com.digitalpersona.onetouch.verification.DPFPVerificationResult;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.SwingUtilities;

/**
 *
 * @author Dan Arevalo
 */
public class frmEntradaPersonal extends javax.swing.JInternalFrame {

    /**
     * Creates new form frmEntradaPersonal
     */
    public frmEntradaPersonal() {
        initComponents();
        javax.swing.Timer t = new javax.swing.Timer(1000, (ActionEvent e) -> {
            Date fecha = new Date();
            SimpleDateFormat dt = new SimpleDateFormat("yyyy/MM/dd");
            String fechaa = dt.format(fecha);
            FechaActual.setText(fechaa);
            dt = new SimpleDateFormat("hh:mm:ss");
            String hora = dt.format(fecha);
            HoraActual.setText(hora);
        });
        t.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        HoraActual = new javax.swing.JFormattedTextField();
        FechaActual = new javax.swing.JFormattedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblImagenHuella = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Notificaciones = new javax.swing.JTextArea();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameOpened(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Files/fondo.jpg"))); // NOI18N

        HoraActual.setEditable(false);
        HoraActual.setBorder(null);
        HoraActual.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        HoraActual.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        FechaActual.setEditable(false);
        FechaActual.setBorder(null);
        FechaActual.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy/MM/dd"))));
        FechaActual.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        FechaActual.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N

        jTable1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTable1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Fecha", "Hora", "Nombre", "Tipo", "Estado"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(80);
        jScrollPane1.setViewportView(jTable1);

        lblImagenHuella.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Files/fondo_1.jpg"))); // NOI18N

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SISTEMA DE CONTROL DEL PERSONAL");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel1.setOpaque(true);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Files/Announcement.png"))); // NOI18N
        jLabel3.setText("Notificaciones");
        jLabel3.setToolTipText("");
        jLabel3.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);

        Notificaciones.setColumns(20);
        Notificaciones.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        Notificaciones.setRows(5);
        jScrollPane2.setViewportView(Notificaciones);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(FechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(135, 135, 135)
                                        .addComponent(HoraActual, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 505, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(lblImagenHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 9, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FechaActual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(HoraActual, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblImagenHuella, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameOpened(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameOpened
        // TODO add your handling code here:
        Connection c = con.conectar();
        PreparedStatement actualiza_asistencia;
        try {
            actualiza_asistencia = c.prepareStatement(
                    "UPDATE personal SET asistencia=false WHERE dni!='00000000';"
            );
            actualiza_asistencia.executeQuery();
        } catch (SQLException ex) {

        }
        Iniciar();
        start();
    }//GEN-LAST:event_formInternalFrameOpened

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        // TODO add your handling code here:
        stop();
        try {
            Connection c = con.conectar();
            Date fecha = new Date();
            SimpleDateFormat fech = new SimpleDateFormat("yyyy/MM/dd");//creamos la fecha actual que se guardara en la base de datos
            String fechaa = fech.format(fecha);
            PreparedStatement verificarStmt = c.prepareStatement("SELECT asistencia, dni FROM personal");
            ResultSet rs = verificarStmt.executeQuery();

            if (rs.next() == true) {
                do {
                    String asistencia = rs.getString("asistencia");
                    String clave = rs.getString("dni");
                    if (asistencia.equals("false")) {
                        try {
                            PreparedStatement insertar = c.prepareStatement("INSERT INTO historial(clave_personal,fecha,estado) VALUES ('" + clave + "','" + fechaa + "','Falta');");
                            insertar.executeQuery();
                        } catch (SQLException e) {
                        }
                    }
                } while (rs.next());
            }
        } catch (SQLException e) {

        } finally {
            con.desconectar();
        }
    }//GEN-LAST:event_formInternalFrameClosing

    private final DPFPCapture Lector = DPFPGlobal.getCaptureFactory().createCapture();
    private final DPFPEnrollment Reclutador = DPFPGlobal.getEnrollmentFactory().createEnrollment();
    private final DPFPVerification Verificador = DPFPGlobal.getVerificationFactory().createVerification();
    private DPFPTemplate template;
    public static String TEMPLATE_PROPERTY = "template";
    public DPFPFeatureSet featuresinscripcion;
    public DPFPFeatureSet featuresverificacion;
    
    protected void Iniciar() {
        Lector.addDataListener(new DPFPDataAdapter() {
            @Override
            public void dataAcquired(final DPFPDataEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("La Huella Digital ha sido Capturada");
                    ProcesarCaptura(e.getSample());
                });
            }
        });

        Lector.addReaderStatusListener(new DPFPReaderStatusAdapter() {
            @Override
            public void readerConnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El Sensor de Huella Digital esta Activado o Conectado");
                });
            }

            @Override
            public void readerDisconnected(final DPFPReaderStatusEvent e) {
                SwingUtilities.invokeLater(() -> {
                    EnviarTexto("El Sensor de Huella Digital esta Desactivado o no Conectado");
                });
            }
        });

        Lector.addSensorListener(new DPFPSensorAdapter() {
            @Override
            public void fingerTouched(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    EnviarTexto("El dedo ha sido colocado sobre el Lector de Huella");
                });
            }

            @Override
            public void fingerGone(final DPFPSensorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    //EnviarTexto("El dedo ha sido quitado del Lector de Huella");
                });
            }
        });

        Lector.addErrorListener(new DPFPErrorAdapter() {
            public void errorReader(final DPFPErrorEvent e) {
                SwingUtilities.invokeLater(() -> {
                    EnviarTexto("Error: " + e.getError());
                });
            }
        });
    }
    
    public void ProcesarCaptura(DPFPSample sample) {
        featuresinscripcion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_ENROLLMENT);
        featuresverificacion = extraerCaracteristicas(sample, DPFPDataPurpose.DATA_PURPOSE_VERIFICATION);
        
        if (featuresinscripcion != null) {
            try {
                System.out.println("Las Características de la Huella han sido creada");
                Reclutador.addFeatures(featuresinscripcion);
                Image image = CrearImagenHuella(sample);
                DibujarHuella(image);
                identificarHuella();
                Reclutador.clear();
                stop();
                start();
            } catch (DPFPImageQualityException ex) {
                System.err.println("Error");
            }
        }
    }
    
    public DPFPFeatureSet extraerCaracteristicas(DPFPSample sample, DPFPDataPurpose purpose) {
        DPFPFeatureExtraction extractor = DPFPGlobal.getFeatureExtractionFactory().createFeatureExtraction();
        try {
            return extractor.createFeatureSet(sample, purpose);
        } catch (DPFPImageQualityException e) {
            return null;
        }
    }

    public Image CrearImagenHuella(DPFPSample sample) {
        return DPFPGlobal.getSampleConversionFactory().createImage(sample);
    }

    public void DibujarHuella(Image image) {
        lblImagenHuella.setIcon(new ImageIcon(
                image.getScaledInstance(lblImagenHuella.getWidth(), lblImagenHuella.getHeight(), Image.SCALE_DEFAULT)));
        repaint();
    }

    public void setTemplate(DPFPTemplate template) {
        DPFPTemplate old = this.template;
        this.template = template;
        firePropertyChange(TEMPLATE_PROPERTY, old, template);
    }

    public void EnviarTexto(String string) {
        Notificaciones.setText(string + "\n");
    }

    public void stop() {
        Lector.stopCapture();
    }

    public DPFPTemplate getTemplate() {
        return template;
    }

    public void start() {
        Lector.startCapture();
    }

    ConexionBD con = new ConexionBD();

    public void identificarHuella() {
        try {
            Connection c = con.conectar();
            PreparedStatement identificarStmt = c.prepareStatement("SELECT nombre,huella,dni FROM personal");
            ResultSet rs = identificarStmt.executeQuery();

            while (rs.next()) {
                byte templateBuffer[] = rs.getBytes("huella");
                String nombre = rs.getString("nombre");
                String clave = rs.getString("dni");
                DPFPTemplate referenceTemplate = DPFPGlobal.getTemplateFactory().createTemplate(templateBuffer);
                setTemplate(referenceTemplate);
                DPFPVerificationResult result = Verificador.verify(featuresverificacion, getTemplate());
                if (result.isVerified()) {

                    Date fecha = new Date(); 
                    SimpleDateFormat dt = new SimpleDateFormat("yyyy/MM/dd");
                    String fechaa = dt.format(fecha);
                    jTable1.setValueAt(fechaa, 0, 0);
                    dt = new SimpleDateFormat("hh:mm:ss");
                    String hora = dt.format(fecha);
                    jTable1.setValueAt(hora, 0, 1);
                    jTable1.setValueAt(nombre, 0, 2);
                    consultaES(clave);

                    return;
                }
            }
            Notificaciones.setText("No existe un registro que coincida con la huella actual\n"
                    + "Repita la operación, revise que su huella no este maltratada");
            jTable1.setValueAt("---", 0, 0);
            jTable1.setValueAt("---", 0, 1);
            jTable1.setValueAt("---", 0, 2);
            jTable1.setValueAt("---", 0, 3);
            jTable1.setValueAt("---", 0, 4);
            setTemplate(null);
        } catch (SQLException e) {

        } finally {
            con.desconectar();
        }
    }
    
    public void consultaES(String clave) {
        Connection ch = con.conectar();
        int hactual, hbase, mactual, mbase;
        String hora1 = null;
        Date dias = new Date();
        SimpleDateFormat dtdia = new SimpleDateFormat("EEEE");
        String fechaaa = dtdia.format(dias);
        String diain = "e" + fechaaa;
        //String diaout = "s" + fechaaa;

        try {
            PreparedStatement consultah = ch.prepareStatement("SELECT * FROM horario WHERE dni=?");
            consultah.setString(1, clave);
            ResultSet res = consultah.executeQuery();
            while (res.next()) {
                String edia = res.getString(diain);
                //String sdia = res.getString(diaout);

                Date hora = new Date();
                SimpleDateFormat dt = new SimpleDateFormat("HH:mm");
                String horatabla = edia;
                Date htabla;
                try {
                    htabla = dt.parse(horatabla);
                    hora1 = dt.format(htabla);
                } catch (ParseException ex) {
                    Logger.getLogger(frmEntradaPersonal.class.getName()).log(Level.SEVERE, null, ex);
                }
                String hora2 = dt.format(hora);

                hactual = Integer.parseInt(hora2.substring(0, 2));
                hbase = Integer.parseInt(hora1.substring(0, 2));

                mactual = Integer.parseInt(hora2.substring(3, 5));
                mbase = Integer.parseInt(hora1.substring(3, 5));

                int horaminutos_entrada = (hbase * 60) + mbase, horaminutos_actual = (hactual * 60) + mactual;
                Date fecha = new Date();
                SimpleDateFormat fech = new SimpleDateFormat("yyyy/MM/dd");
                String fechaa = fech.format(fecha);

                if (horaminutos_entrada < horaminutos_actual) {
                    jTable1.setValueAt("Entrada", 0, 3);
                    jTable1.setValueAt("Retardo", 0, 4);
                    Notificaciones.setText("Asistencia registrada\n"
                            + "Procure llegar mas temprano");
                    PreparedStatement insertar = ch.prepareStatement("INSERT INTO historial(clave_personal,fecha,estado) VALUES ('" + clave + "','" + fechaa + "','Retardo');");
                    insertar.executeQuery();

                } else {
                    jTable1.setValueAt("Entrada", 0, 3);
                    jTable1.setValueAt("Normal", 0, 4);
                    Notificaciones.setText("Asistencia registrada\n");
                    PreparedStatement insertar = ch.prepareStatement("INSERT INTO historial(clave_personal,fecha,estado) VALUES('" + clave + "','" + fechaa + "','Normal');");
                    insertar.executeQuery();
                }
            }
        } catch (SQLException ex) {
            PreparedStatement actualiza_asistencia;
            try {
                actualiza_asistencia = ch.prepareStatement(
                        "UPDATE personal SET asistencia=true WHERE dni='" + clave + "';"
                );
                actualiza_asistencia.executeQuery();
            } catch (SQLException ex1) {

            }
        }

        con.desconectar();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField FechaActual;
    private javax.swing.JFormattedTextField HoraActual;
    private javax.swing.JTextArea Notificaciones;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblImagenHuella;
    // End of variables declaration//GEN-END:variables
}
